{"componentChunkName":"component---node-modules-gatsby-theme-document-src-templates-docs-js","path":"/DC/4-Issues-In-Designing-Distributed-Systems","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Issues In Designing Distributed Systems\",\n  \"description\": \"Issues In Designing Distributed Systems\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", {\n    \"id\": \"1-heterogeneity\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"1. Heterogeneity\"), mdx(\"p\", null, \"The Internet enables users to access services and run applications over a heterogeneous collection of computers and networks.Internet consists of many different sorts of network their differences are masked by the fact that all of the computers attached to them use the Internet protocols to communicate with one another.For eg., a computer attached to an Ethernet has an implementation of the Internet protocols over the Ethernet, whereas a computer on a different sort of network will need an implementation of the Internet protocols for that network.\"), mdx(\"h3\", {\n    \"id\": \"2-openness\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"2. Openness\"), mdx(\"p\", null, \"The openness of a computer system is the characteristic that determines whether the system can be extended and re-implemented in various ways.The openness of distributed systems is determined primarily by the degree to which new resource-sharing services can be added and be made available for use by a variety of client programs.\"), mdx(\"h3\", {\n    \"id\": \"3-security\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"3. Security\"), mdx(\"p\", null, \"Many of the information resources that are made available and maintained in distributed systems have a high intrinsic value to their users.Their security is therefore of considerable importance. Security for information resources has three components: confidentiality, integrity, and availability.\"), mdx(\"h3\", {\n    \"id\": \"4-scalability\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"4. Scalability\"), mdx(\"p\", null, \"Distributed systems operate effectively and efficiently at many different scales, ranging from a small intranet to the Internet. A system is described as scalable if it will remain effective when there is a significant increase in the number of resources and the number of users.\"), mdx(\"h3\", {\n    \"id\": \"5-failure-handling\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"5. Failure handling\"), mdx(\"p\", null, \"Computer systems sometimes fail. When faults occur in hardware or software, programs may produce incorrect results or may stop before they have completed the intended computation. Failures in a distributed system are partial \\u2013 that is, some components fail while others continue to function. Therefore the handling of failures is particularly difficult.\"), mdx(\"h3\", {\n    \"id\": \"6-concurrency\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"6. Concurrency\"), mdx(\"p\", null, \"Both services and applications provide resources that can be shared by clients in a distributed system. There is therefore a possibility that several clients will attempt to access a shared resource at the same time. Object that represents a shared resource in a distributed system must be responsible for ensuring that it operates correctly in a concurrent environment. This applies not only to servers but also to objects in applications. Therefore any programmer who takes an implementation of an object that was not intended for use in a distributed system must do whatever is necessary to make it safe in a concurrent environment.\"), mdx(\"h3\", {\n    \"id\": \"7-transparency\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"7. Transparency\"), mdx(\"p\", null, \"Transparency can be achieved at two different levels. Easiest to do is to hide the distribution from the users. The concept of transparency can be applied to several aspects of a distributed system.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Location transparency: The users cannot tell where resources are located\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Migration transparency: Resources can move at will without changing their names\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Replication transparency: The users cannot tell how many copies exist.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Concurrency transparency: Multiple users can share resources automatically.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Parallelism transparency: Activities can happen in parallel without users knowing.\")), mdx(\"h3\", {\n    \"id\": \"8-quality-of-service\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"8. Quality of service\"), mdx(\"p\", null, \"Once users are provided with the functionality that they require of a service, such as the file service in a distributed system, we can go on to ask about the quality of the service provided. The main nonfunctional properties of systems that affect the quality of the service experienced by clients and users are reliability, security and performance. Adaptability to meet changing system configurations and resource availability has been recognized as a further important aspect of service quality.\"), mdx(\"h3\", {\n    \"id\": \"9-reliability\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"9. Reliability\"), mdx(\"p\", null, \"One of the original goals of building distributed systems was to make them more reliable than single-processor systems. The idea is that if a machine goes down, some other machine takes over the job. A highly reliable system must be highly available, but that is not enough. Data entrusted to the system must not be lost or garbled in any way, and if files are stored redundantly on multiple servers, all the copies must be kept consistent. In general, the more copies that are kept, the better the availability, but the greater the chance that they will be inconsistent, especially if updates are frequent.\"), mdx(\"h3\", {\n    \"id\": \"10-performance\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"10. Performance\"), mdx(\"p\", null, \"Always the hidden data in the background is the issue of performance. Building a transparent, flexible, reliable distributed system, more important lies in its performance. In particular, when running a particular application on a distributed system, it should not be appreciably worse than running the same application on a single processor. Unfortunately, achieving this is easier said than done.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#1-heterogeneity","title":"1. Heterogeneity"},{"url":"#2-openness","title":"2. Openness"},{"url":"#3-security","title":"3. Security"},{"url":"#4-scalability","title":"4. Scalability"},{"url":"#5-failure-handling","title":"5. Failure handling"},{"url":"#6-concurrency","title":"6. Concurrency"},{"url":"#7-transparency","title":"7. Transparency"},{"url":"#8-quality-of-service","title":"8. Quality of service"},{"url":"#9-reliability","title":"9. Reliability"},{"url":"#10-performance","title":"10. Performance"}]},"frontmatter":{"title":"Issues In Designing Distributed Systems","description":"Issues In Designing Distributed Systems"}}},"pageContext":{"id":"9a43915c-8bfe-5fbb-8521-568aeab44bcd"}}}